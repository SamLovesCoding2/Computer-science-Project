package ScifiGame;

import java.awt.Canvas;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.image.BufferStrategy;
import java.util.Random;

public class Game extends Canvas implements Runnable {

	/**
	 * 
	 */
	private static final long serialVersionUID = -6632484869803414524L; // set up the ID
	public static final int WIDTH = 640, HEIGHT = WIDTH / 12 * 9;// the width and height of the window
// variables:
	private Thread thread;
	private boolean running = false;
	private Random r;
	private Handler handler;
	private HUD hud;
	private Spawn spawner;
	private PlayerBullet p;
	private Menu menu;

//a switch to change between Menu and Game
	public enum STATE {
		Menu, Help, Game,

	};

	public STATE gameState = STATE.Menu;

	public Game() {
		// initialize everything
		handler = new Handler();
		menu = new Menu(this, handler);
		this.addKeyListener(new KeyInput(handler));
		
		this.addMouseListener(menu);
		
		new Window(WIDTH, HEIGHT, "let's build a game!", this);

		hud = new HUD();
		spawner = new Spawn(handler, hud);
		
		r = new Random();

		// initialize the game
		if (gameState == STATE.Menu) {
			handler.addObject(new Player(WIDTH / 2 - 32, HEIGHT / 2 - 32, ID.Player, handler));
			//handler.addObject(
					//new BasicEnemy(r.nextInt(Game.WIDTH - 50), r.nextInt(Game.HEIGHT - 50), ID.BasicEnemy, handler));
		}
		this.addMouseListener(new MouseInput(handler));
		

	}

	public synchronized void start() {
		thread = new Thread(this);
		thread.start();
		running = true;
	}

	public synchronized void stop() {
		try {
			thread.join();
			running = false;
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

//logic behind the moments
	public void run() {
		this.requestFocus();
		long lastTime = System.nanoTime();
		double amountOfTicks = 60.0;
		double ns = 1000000000 / amountOfTicks;
		double delta = 0;
		long timer = System.currentTimeMillis();
		int frames = 0;
		while (running) {
			long now = System.nanoTime();
			delta += (now - lastTime) / ns;
			lastTime = now;
			while (delta >= 1) {
				tick();
				delta--;

			}
			if (running)
				render();
			frames++;

			if (System.currentTimeMillis() - timer > 1000) {
				timer += 1000;
				System.out.println("fps: " + frames);
				frames = 0;
			}

		}

		stop();
	}

// tick methods will control what will happen
	private void tick() {
		handler.tick();
		if (gameState == STATE.Game) {
			hud.tick();
			spawner.tick();
		} else if (gameState == STATE.Menu) {
			menu.tick();
		}

	}

//graphics
	private void render() {
		BufferStrategy bs = this.getBufferStrategy();
		if (bs == null) {
			this.createBufferStrategy(3);
			return;
		}

		Graphics g = bs.getDrawGraphics();

		g.setColor(Color.white);
		g.fillRect(0, 0, WIDTH, HEIGHT);
		handler.render(g);

		if (gameState == STATE.Game) {
			hud.render(g);

		} else if (gameState == STATE.Menu || gameState == STATE.Help) {
			menu.render(g);
		}

		if (hud.getLevel() == 21) {
			Font fnt2 = new Font("arial", 1, 30);
			g.setFont(fnt2);
			g.drawString("Hello", 200, 200);

		}
		if (hud.getLevel() == 22) {
			System.exit(1);
		}
		g.dispose();
		bs.show();
	}

//is to check whether or not an object is out of boundary.
	public static float clamp(float var, float min, float max) {
		if (var >= max) {
			return (var = max);
		} else if (var <= min)
			return (var = min);
		else
			return var;

	}

//main class
	public static void main(String args[]) {
		new Game();
	}
}
